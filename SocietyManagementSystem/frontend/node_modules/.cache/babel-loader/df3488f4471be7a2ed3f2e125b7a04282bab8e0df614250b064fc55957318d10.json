{"ast":null,"code":"/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Sidebar from './Sidebar';\r\nimport './Services.css';\r\nimport { getUserFromStorage } from './utils.js';\r\n\r\nconst MaintenancePage = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [requests, setRequests] = useState([]); // Ensure requests is initialized as an array\r\n  const [serviceType, setServiceType] = useState('Electric'); // Service type dropdown\r\n  const [issueDescription, setIssueDescription] = useState(''); // Description textarea\r\n\r\n  useEffect(() => {\r\n    const token = getUserFromStorage();\r\n\r\n    if (!token) {\r\n      // Redirect to login if no user is found\r\n      window.location.href = '/society/login';\r\n      return;\r\n    }\r\n\r\n    setUser({ token }); // Setting the token in the user state\r\n\r\n    const fetchRequests = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:4069/society/homepage/services', {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n        if (Array.isArray(response.data.serviceRequests)) {\r\n          setRequests(response.data.serviceRequests);\r\n        } else {\r\n          setRequests([]); // Handle non-array response\r\n        }\r\n        console.log('Maintenance requests fetched:', response.data.serviceRequests);\r\n      } catch (error) {\r\n        console.error('Failed to fetch data:', error);\r\n      }\r\n    };\r\n\r\n    fetchRequests();\r\n  }, []);\r\n\r\n  const handleCreateRequest = async () => {\r\n    const token = user.token;\r\n    const newRequest = { serviceType, description: issueDescription };\r\n\r\n    try {\r\n      const response = await axios.post(`http://localhost:4069/society/homepage/services/${serviceType}`, newRequest, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      console.log('Create request response:', response.data);\r\n      setRequests([...requests, response.data.service]); // Update state to include new request\r\n      setServiceType('Electric'); // Reset to default\r\n      setIssueDescription('');\r\n      console.log('Maintenance request created:', response.data.service);\r\n    } catch (error) {\r\n      console.error('Failed to create request:', error);\r\n      alert(`Failed to create request: ${error.response ? error.response.data.error : error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleUpdateRequest = async (requestId) => {\r\n    const updatedDescription = prompt('Update description:', requests.find(req => req._id === requestId).description);\r\n    if (!updatedDescription) return;\r\n\r\n    const token = user.token;\r\n\r\n    try {\r\n      const response = await axios.put(`http://localhost:4069/society/homepage/services/${requestId}`, { description: updatedDescription }, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      setRequests(requests.map(request => request._id === requestId ? response.data.service : request));\r\n      console.log('Maintenance request updated:', response.data.service);\r\n    } catch (error) {\r\n      console.error('Failed to update request:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteRequest = async (requestId) => {\r\n    const token = user.token;\r\n\r\n    try {\r\n      await axios.delete(`http://localhost:4069/society/homepage/services/${requestId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      setRequests(requests.filter(request => request._id !== requestId));\r\n      console.log('Maintenance request deleted:', requestId);\r\n    } catch (error) {\r\n      console.error('Failed to delete request:', error);\r\n    }\r\n  };\r\n\r\n  const handleResolveRequest = async (requestId) => {\r\n    const token = user.token;\r\n\r\n    try {\r\n      const response = await axios.put(`http://localhost:4069/society/homepage/services/${requestId}`, {}, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      setRequests(requests.map(request => request._id === requestId ? response.data.service : request));\r\n      console.log('Maintenance request resolved:', response.data.service);\r\n    } catch (error) {\r\n      console.error('Failed to resolve request:', error);\r\n    }\r\n  };\r\n\r\n  const renderRequests = () => (\r\n    <div className=\"requests-list\">\r\n      {Array.isArray(requests) && requests.map(request => (\r\n        <div key={request._id} className=\"request-item\">\r\n          <p><strong>Service Type:</strong> {request.serviceType}</p>\r\n          <p><strong>Description:</strong> {request.description}</p>\r\n          <p><strong>Posted by:</strong> {request.user?.name || 'N/A'}</p>\r\n          <p><strong>Contact Number:</strong> {request.user?.contactno || 'N/A'}</p>\r\n          <p><strong>Flat Number:</strong> {request.user?.flatno || 'N/A'}</p>\r\n          <button onClick={() => handleUpdateRequest(request._id)}>Update</button>\r\n          <button onClick={() => handleDeleteRequest(request._id)}>Delete</button>\r\n          <button onClick={() => handleResolveRequest(request._id)}>Resolve</button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <Sidebar />\r\n      <div className=\"main-content\">\r\n        <h2>Maintenance Requests</h2>\r\n        <div className=\"content-sections\">\r\n          <div className=\"create-request-section\">\r\n            <div className=\"create-request-form\">\r\n              <h3>Create a Maintenance Request</h3>\r\n              <label>\r\n                Service Type:\r\n                <select value={serviceType} onChange={(e) => setServiceType(e.target.value)}>\r\n                  <option value=\"Electric\">Electric</option>\r\n                  <option value=\"Plumbing\">Plumbing</option>\r\n                  <option value=\"Others\">Others</option>\r\n                </select>\r\n              </label>\r\n              <label>\r\n                Description:\r\n                <textarea value={issueDescription} onChange={(e) => setIssueDescription(e.target.value)}></textarea>\r\n              </label>\r\n              <button onClick={handleCreateRequest}>Submit Request</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"view-requests-section\">\r\n            {renderRequests()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenancePage;  */","map":{"version":3,"names":[],"sources":["C:/Users/USER/Documents/GitHub/Society-Management-/SocietyManagementSystem/frontend/src/components/Services.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Sidebar from './Sidebar';\r\nimport './Services.css';\r\nimport { getUserFromStorage } from './utils.js';\r\n\r\nconst MaintenancePage = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [requests, setRequests] = useState([]); // Ensure requests is initialized as an array\r\n  const [serviceType, setServiceType] = useState('Electric'); // Service type dropdown\r\n  const [issueDescription, setIssueDescription] = useState(''); // Description textarea\r\n\r\n  useEffect(() => {\r\n    const token = getUserFromStorage();\r\n\r\n    if (!token) {\r\n      // Redirect to login if no user is found\r\n      window.location.href = '/society/login';\r\n      return;\r\n    }\r\n\r\n    setUser({ token }); // Setting the token in the user state\r\n\r\n    const fetchRequests = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:4069/society/homepage/services', {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n        if (Array.isArray(response.data.serviceRequests)) {\r\n          setRequests(response.data.serviceRequests);\r\n        } else {\r\n          setRequests([]); // Handle non-array response\r\n        }\r\n        console.log('Maintenance requests fetched:', response.data.serviceRequests);\r\n      } catch (error) {\r\n        console.error('Failed to fetch data:', error);\r\n      }\r\n    };\r\n\r\n    fetchRequests();\r\n  }, []);\r\n\r\n  const handleCreateRequest = async () => {\r\n    const token = user.token;\r\n    const newRequest = { serviceType, description: issueDescription };\r\n\r\n    try {\r\n      const response = await axios.post(`http://localhost:4069/society/homepage/services/${serviceType}`, newRequest, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      console.log('Create request response:', response.data);\r\n      setRequests([...requests, response.data.service]); // Update state to include new request\r\n      setServiceType('Electric'); // Reset to default\r\n      setIssueDescription('');\r\n      console.log('Maintenance request created:', response.data.service);\r\n    } catch (error) {\r\n      console.error('Failed to create request:', error);\r\n      alert(`Failed to create request: ${error.response ? error.response.data.error : error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleUpdateRequest = async (requestId) => {\r\n    const updatedDescription = prompt('Update description:', requests.find(req => req._id === requestId).description);\r\n    if (!updatedDescription) return;\r\n\r\n    const token = user.token;\r\n\r\n    try {\r\n      const response = await axios.put(`http://localhost:4069/society/homepage/services/${requestId}`, { description: updatedDescription }, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      setRequests(requests.map(request => request._id === requestId ? response.data.service : request));\r\n      console.log('Maintenance request updated:', response.data.service);\r\n    } catch (error) {\r\n      console.error('Failed to update request:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteRequest = async (requestId) => {\r\n    const token = user.token;\r\n\r\n    try {\r\n      await axios.delete(`http://localhost:4069/society/homepage/services/${requestId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      setRequests(requests.filter(request => request._id !== requestId));\r\n      console.log('Maintenance request deleted:', requestId);\r\n    } catch (error) {\r\n      console.error('Failed to delete request:', error);\r\n    }\r\n  };\r\n\r\n  const handleResolveRequest = async (requestId) => {\r\n    const token = user.token;\r\n\r\n    try {\r\n      const response = await axios.put(`http://localhost:4069/society/homepage/services/${requestId}`, {}, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      setRequests(requests.map(request => request._id === requestId ? response.data.service : request));\r\n      console.log('Maintenance request resolved:', response.data.service);\r\n    } catch (error) {\r\n      console.error('Failed to resolve request:', error);\r\n    }\r\n  };\r\n\r\n  const renderRequests = () => (\r\n    <div className=\"requests-list\">\r\n      {Array.isArray(requests) && requests.map(request => (\r\n        <div key={request._id} className=\"request-item\">\r\n          <p><strong>Service Type:</strong> {request.serviceType}</p>\r\n          <p><strong>Description:</strong> {request.description}</p>\r\n          <p><strong>Posted by:</strong> {request.user?.name || 'N/A'}</p>\r\n          <p><strong>Contact Number:</strong> {request.user?.contactno || 'N/A'}</p>\r\n          <p><strong>Flat Number:</strong> {request.user?.flatno || 'N/A'}</p>\r\n          <button onClick={() => handleUpdateRequest(request._id)}>Update</button>\r\n          <button onClick={() => handleDeleteRequest(request._id)}>Delete</button>\r\n          <button onClick={() => handleResolveRequest(request._id)}>Resolve</button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <Sidebar />\r\n      <div className=\"main-content\">\r\n        <h2>Maintenance Requests</h2>\r\n        <div className=\"content-sections\">\r\n          <div className=\"create-request-section\">\r\n            <div className=\"create-request-form\">\r\n              <h3>Create a Maintenance Request</h3>\r\n              <label>\r\n                Service Type:\r\n                <select value={serviceType} onChange={(e) => setServiceType(e.target.value)}>\r\n                  <option value=\"Electric\">Electric</option>\r\n                  <option value=\"Plumbing\">Plumbing</option>\r\n                  <option value=\"Others\">Others</option>\r\n                </select>\r\n              </label>\r\n              <label>\r\n                Description:\r\n                <textarea value={issueDescription} onChange={(e) => setIssueDescription(e.target.value)}></textarea>\r\n              </label>\r\n              <button onClick={handleCreateRequest}>Submit Request</button>\r\n            </div>\r\n          </div>\r\n          <div className=\"view-requests-section\">\r\n            {renderRequests()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenancePage;  */\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}